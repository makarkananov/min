// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "min/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// ShortenerService is an autogenerated mock type for the ShortenerService type
type ShortenerService struct {
	mock.Mock
}

// Remove provides a mock function with given fields: ctx, short
func (_m *ShortenerService) Remove(ctx context.Context, short string) error {
	ret := _m.Called(ctx, short)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, short)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resolve provides a mock function with given fields: ctx, short
func (_m *ShortenerService) Resolve(ctx context.Context, short string) (string, error) {
	ret := _m.Called(ctx, short)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, short)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, short)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, short)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shorten provides a mock function with given fields: ctx, url, author
func (_m *ShortenerService) Shorten(ctx context.Context, url string, author *domain.User) (string, error) {
	ret := _m.Called(ctx, url, author)

	if len(ret) == 0 {
		panic("no return value specified for Shorten")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.User) (string, error)); ok {
		return rf(ctx, url, author)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.User) string); ok {
		r0 = rf(ctx, url, author)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.User) error); ok {
		r1 = rf(ctx, url, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewShortenerService creates a new instance of ShortenerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShortenerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShortenerService {
	mock := &ShortenerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
